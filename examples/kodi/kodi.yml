# Set the IFTTT webhook with something like
# http://yourdomain:port/ifttt/broker?phrase={{TextField}}&lang=en

- name: "Incoming IFTTT request"
  pipe:
  - name: IFTTT dedicated endpoint
    match:
      string: =In.URL.Path
      value: /ifttt
  - name: Must be HTTP POST
    match:
      string: =In.Method
      value: POST
  - name: Parse JSON body
    body:
      mime: application/json
      type: json
    register: body
  - name: JSON payload must contain the token set in IFTTT
    match:
      string: = R.body.payload.token
      value: secretToken

  - name: Get lang query param
    variable:
    - lang: '= In.URL.Query()|lang[0]'
  - name: Read strings corresponding to lang param
    readfile:
      yaml: '="examples/kodi/kodi."+V.lang+".yml"'
    register: strings

  - name: Voices for TTS
    variable:
      - voices: # https://cloud.google.com/text-to-speech/docs/voices
          fr:
            - fr-FR
            - fr-FR-Standard-C
          en:
            - en-US
            - en-US-Standard-G

  - name: Set default values
    default:
      match: # Phrase from Google Assistant sent by IFTTT
        string: '= In.URL.Query()|phrase[0]'
      jsonrpc: # Kodi API params
        url: http://192.168.0.32:8080/jsonrpc
        basic_auth:
          username: kodi
          password: mykodipasswd
      chromecast: # Used to give feedback to commands
        # Google Home IP addr
        addr: 192.168.3.9
        # TTS params
        language_code: '=V.voices[V.lang][0]'
        voice_name: '=V.voices[V.lang][1]'
        # Credentials to use Google API service for TTS
        google_service_account: "~/.credentials/google_service_account.json"

# We use one sub-pipe per action to be done:

  - name: Mute sound
    pipe:
    - name: Match a phrase asking to mute sound
      match:
        regexp:  =R.strings.content.mute.regexp
      register: mute
    - name: Mute sound on Kodi
      jsonrpc:
        procedure: Application.SetMute
        params:
          mute: toggle
    result: "= !R.mute.result" # Stop here if the phrase was matched


  - name: Play/Pause
    pipe:
    - name: Match a phrase asking to play or pause
      match:
        regexp:  =R.strings.content.playpause.regexp
      register: playpause
    - name: Playpause Kodi video
      jsonrpc:
        procedure: Player.PlayPause
        params:
          playerid: 1 # video player
      result: =true # in case no video was playing
    - name: Playpause Kodi audio
      jsonrpc:
        procedure: Player.PlayPause
        params:
          playerid: 0 # audio player
    result: "= !R.playpause.result" # Stop here if the phrase was matched


  - name: Stop
    pipe:
    - name: Match a phrase asking to stop
      match:
        regexp:  =R.strings.content.stop.regexp
      register: stop
    - name: Stop Kodi video
      jsonrpc:
        procedure: Player.Stop
        params:
          playerid: 1 # video player
      result: =true # in case no video was playing
    - name: Stop Kodi audio
      jsonrpc:
        procedure: Player.Stop
        params:
          playerid: 0 # audio player
    result: "= !R.stop.result" # Stop here if the phrase was matched


  - name: Scan library
    pipe:
    - name: Match a phrase asking to scan library
      match:
        regexp:  =R.strings.content.scan_library.regexp
      register: scan

    - name: Scan library on Kodi
      jsonrpc:
        procedure: VideoLibrary.Scan

    - name: Log command
      log:
        msg: '=R.strings.content.scan_library.feedback'
    - name: Acknowledge command
      chromecast:
        tts: '=R.strings.content.scan_library.feedback'

    result: "= !R.scan.result" # Stop here if the phrase was matched

  - name: Clean library
    pipe:
    - name: Match a phrase asking to clean library
      match:
        regexp:  =R.strings.content.clean_library.regexp
      register: clean

    - name: Clean library on Kodi
      jsonrpc:
        procedure: VideoLibrary.Clean

    - name: Acknowledge command
      chromecast:
        tts: '=R.strings.content.clean_library.feedback'

    result: "= !R.clean.result" # Stop here if the phrase was matched


  - name: Play episode
    pipe:
    - name: Match a phrase asking to play a episode
      match:
        regexp: =R.strings.content.play_tvshow.regexp
      register: tvshow

    - name: Get the list of all available tvshows
      jsonrpc:
        procedure: VideoLibrary.GetTVShows
      register: tvshows

    - name: Get the tvshowid using a fuzzy search on all tvshows titles
      variable:
        # get titles from Kodi response with a jsonpath expression
        - titles:  '= R.tvshows.response | $.tvshows[*].label'
        # get best matching title
        - title:   '= fuzzy(R.tvshow.named.title, V.titles)'
        # get id corresponding to matched title
        - tvshowid: >
            = jsonpath(format(`$.tvshows[?(@.label=="%s")].tvshowid`, V.title),
              R.tvshows.response)

    - name: Get the list of all episodes for that tvshow
      jsonrpc:
        procedure: VideoLibrary.GetEpisodes
        params:
          tvshowid: =V.tvshowid[0]
          sort: # Sorted by episode number
            order: ascending
            method: episode
            ignorearticle: true
          properties:
            - playcount # need playcount to filter out watched episode
            - episode
      register: episodes

    - name: Get a list of only unwatched episodes
      variable:
        - unwatched: '= R.episodes.response | $.episodes[?(@.playcount==0)].episodeid'
        - unwatched_label: '= R.episodes.response | $.episodes[?(@.playcount==0)].label'

    - name: No unwatched episode
      when: '=len(V.unwatched) == 0'
      chromecast:
        tts: '=format(R.strings.content.play_tvshow.notfound, V.title)'
      result: =false # stop here

    - name: Log the tvshow that will be played
      log:
        msg: >
          =format(R.strings.content.play_tvshow.feedback, V.title, V.unwatched_label[0])

    - name: Play episdoe
      jsonrpc:
        procedure: Player.Open
        params:
          item: # Play the first unwatched episode
            episodeid:  = V.unwatched[0]
    result: '=!R.tvshow.result' # Stop here if the phrase was matched



  - name: Play song
    pipe:
    - name: Match a phrase asking to play a song
      match:
        regexp: =R.strings.content.play_song.regexp
      register: song

    - name: Get the list of all available songs
      jsonrpc:
        procedure: AudioLibrary.GetSongs
      register: songs

    - name: Get the song ID using a fuzzy search on all titles
      variable:
          # get titles from Kodi response with a jsonpath expression
        - titles:  '= R.songs.response | $.songs[*].label'
          # get best matching title
        - title:   '= fuzzy(R.song.named.title, V.titles)'
          # get id corresponding to matched title
        - songid: >
            = jsonpath(format(`$.songs[?(@.label=="%s")].songid`, V.title),
                       R.songs.response)

    - name: No song found
      when: '=len(V.songid) == 0'
      chromecast:
        tts: '=format(R.strings.content.play_song.notfound, R.song.named.title)'
      result: =false # stop here

    - log:      # Log the song that will be played
        msg: '=format(R.strings.content.play_song.feedback, V.title)'

    - name: Turn on TV # needs json-cec addon installed on Kodi
      jsonrpc:
        procedure: Addons.ExecuteAddon
        params:
          addonid: script.json-cec
          params:
            command: activate
      result: =true # ignore if addon not installed

    - name: Play the song
      jsonrpc:
        procedure: Player.Open
        params:
          item:
            songid: "=V.songid[0]"
    result: "=!R.song.result" # Stop here if the phrase was matched


  - name: Play album
    pipe:
    - name: Match a phrase asking to play an album
      match:
        regexp: =R.strings.content.play_album.regexp
      register: album

    - name: Get the list of all available albums
      jsonrpc:
        procedure: AudioLibrary.GetAlbums
      register: albums

    - name: Get the album ID using a fuzzy search on all titles
      variable:
          # get titles from Kodi response with a jsonpath expression
        - titles:  '= R.albums.response | $.albums[*].label'
          # get best matching title
        - title:   '= fuzzy(R.album.named.title, V.titles)'
          # get id corresponding to matched title
        - albumid: >
            = jsonpath(format(`$.albums[?(@.label=="%s")].albumid`, V.title),
                       R.albums.response)

    - name: No album found
      when: '=len(V.albumid) == 0'
      chromecast:
        tts: '=format(R.strings.content.play_album.notfound, R.album.named.title)'
      result: =false # stop here

    - log:      # Log the album that will be played
        msg: '=format(R.strings.content.play_album.feedback, V.title)'

    - name: Turn on TV # needs json-cec addon installed on Kodi
      jsonrpc:
        procedure: Addons.ExecuteAddon
        params:
          addonid: script.json-cec
          params:
            command: activate
      result: =true # ignore if addon not installed

    - name: Play the album
      jsonrpc:
        procedure: Player.Open
        params:
          item:
            albumid: "=V.albumid[0]"
    result: "=!R.album.result" # Stop here if the phrase was matched




  - name: Play artist
    pipe:
    - name: Match a phrase asking to play an artist
      match:
        regexp: =R.strings.content.play_artist.regexp
      register: artist

    - name: Get the list of all available artists
      jsonrpc:
        procedure: AudioLibrary.GetArtists
      register: artists

    - name: Get the artist ID using a fuzzy search on all artists
      variable:
          # get artists from Kodi response with a jsonpath expression
        - artists:  '= R.artists.response | $.artists[*].label'
          # get best matching artist
        - artist:   '= fuzzy(R.artist.named.artist, V.artists)'
          # get id corresponding to matched artist
        - artistid: >
            = jsonpath(format(`$.artists[?(@.label=="%s")].artistid`, V.artist),
                       R.artists.response)

    - name: No artist found
      when: '=len(V.artistid) == 0'
      chromecast:
        tts: '=format(R.strings.content.play_artist.notfound, R.artist.named.artist)'
      result: =false # stop here

    - log:      # Log the artist that will be played
        msg: '=format(R.strings.content.play_artist.feedback, V.artist)'

    - name: Turn on TV # needs json-cec addon installed on Kodi
      jsonrpc:
        procedure: Addons.ExecuteAddon
        params:
          addonid: script.json-cec
          params:
            command: activate
      result: =true # ignore if addon not installed

    - name: Play the artist
      jsonrpc:
        procedure: Player.Open
        params:
          item:
            artistid: "=V.artistid[0]"
          options:
            shuffled: true
    result: "=!R.artist.result" # Stop here if the phrase was matched


  - name: Play genre
    pipe:
    - name: Match a phrase asking to play an genre
      match:
        regexp: =R.strings.content.play_genre.regexp
      register: genre

    - name: Get the list of all available genres
      jsonrpc:
        procedure: AudioLibrary.GetGenres
      register: genres

    - name: Get the genre ID using a fuzzy search on all genres
      variable:
          # get genres from Kodi response with a jsonpath expression
        - genres:  '= R.genres.response | $.genres[*].label'
          # get best matching genre
        - genre:   '= fuzzy(R.genre.named.genre, V.genres)'
          # get id corresponding to matched genre
        - genreid: >
            = jsonpath(format(`$.genres[?(@.label=="%s")].genreid`, V.genre),
                       R.genres.response)

    - name: No genre found
      when: '=len(V.genreid) == 0'
      chromecast:
        tts: '=format(R.strings.content.play_genre.notfound, R.genre.named.genre)'
      result: =false # stop here

    - log:      # Log the genre that will be played
        msg: '=format(R.strings.content.play_genre.feedback, V.genre)'

    - name: Turn on TV # needs json-cec addon installed on Kodi
      jsonrpc:
        procedure: Addons.ExecuteAddon
        params:
          addonid: script.json-cec
          params:
            command: activate
      result: =true # ignore if addon not installed

    - name: Play the genre
      jsonrpc:
        procedure: Player.Open
        params:
          item:
            genreid: "=V.genreid[0]"
          options:
            shuffled: true
    result: "=!R.genre.result" # Stop here if the phrase was matched



  - name: Play movie
    pipe:
    - name: Match a phrase asking to play a movie
      match:
        regexp: =R.strings.content.play_movie.regexp
      register: movie

    - name: Get the list of all available movies
      jsonrpc:
        procedure: VideoLibrary.GetMovies
      register: movies

    - name: Get the movie ID using a fuzzy search on all titles
      variable:
          # get titles from Kodi response with a jsonpath expression
        - titles:  '= R.movies.response | $.movies[*].label'
          # get best matching title
        - title:   '= fuzzy(R.movie.named.title, V.titles)'
          # get id corresponding to matched title
        - movieid: >
            = jsonpath(format(`$.movies[?(@.label=="%s")].movieid`, V.title),
                       R.movies.response)

    - name: Movie not found
      chromecast:
        tts: '=format(R.strings.content.play_movie.notfound, R.movie.named.title)'
      when: '=len(V.movieid) == 0'
      result: =false # stop here

    - log:      # Log the movie that will be played
        msg: '=format(R.strings.content.play_movie.feedback, V.title)'

    - name: Play the movie
      jsonrpc:
        procedure: Player.Open
        params:
          item:
            movieid: "=V.movieid[0]"
    result: "=!R.movie.result" # Stop here if the phrase was matched

- name: "Validate that it's an incoming IFTTT request"
  pipe:
  - name: Run only on IFTTT dedicated endpoint
    match:
      string: =In.Req.URL.Path
      fixed: /ifttt
  - name: must be HTTP POST
    match:
      string: =In.Req.Method
      fixed: POST
  - name: Body must be json
    match:
      string: =In.Mime
      fixed: application/json
  - name: body must be a json object that contains the token set in IFTTT
    match:
      string: = jsonpath("$.token", In.Body)
      fixed: abcd
  - name: Read strings corresponding to language param
    readfile:
      yaml: '="examples/kodi."+In.URL.Params.lang[0]+".yml"'
    register: strings
  - name: Set default values for match & jsonrcp
    default:
      match: # Phrase from Google Assistant sent by IFTTT
        string: = In.URL.Params.phrase[0]
      jsonrpc: # Kodi API params
        url: http://192.168.0.32:8080/jsonrpc
        basic_auth:
          username: kodi
          password: ghghpczyuq
      chromecast: # Used to give feedback to commands
        # Google Home IP addr
        addr: 192.168.3.9
        # TTS params
        language_code: fr-FR
        voice_name: fr-FR-Standard-C
        # Credentials to use Google TTS service
        google_service_account: "~/.credentials/google_service_account.json"

# We use one sub-pipe per phrase to match:

  - name: Mute sound
    pipe:
    - name: Match a phrase asking to mute sound
      match:
        regexp:  =R.strings.content.mute.regexp
      register: mute
    - name: Mute sound on Kodi
      jsonrpc:
        procedure: Application.SetMute
        params:
          mute: toggle
    result: "= !R.mute.result" # Stop here if the phrase was matched


  - name: Play episode
    pipe:
    - name: Match a phrase asking to play a episode
      match:
        regexp: =R.strings.content.play_tvshow.regexp
      register: tvshow

    - name: Get the list of all available tvshows
      jsonrpc:
        procedure: VideoLibrary.GetTVShows
      register: tvshows

    - name: Get the tvshowid using a fuzzy search on all tvshows titles
      set:
        # get titles from Kodi response with a jsonpath expression
        - titles:  '= R.tvshows.response | $.tvshows[*].label'
        # get best matching title
        - title:   '= fuzzy(R.tvshow.named.title, V.titles)'
        # get id corresponding to matched title
        - tvshowid: >
            = jsonpath(format(`$.tvshows[?(@.label=="%s")].tvshowid`, V.title),
              R.tvshows.response)

    - name: Get the list of all episodes for that tvshow
      jsonrpc:
        procedure: VideoLibrary.GetEpisodes
        params:
          tvshowid: =V.tvshowid[0]
          sort: # Sorted by episode number
            order: ascending
            method: episode
            ignorearticle: true
          properties:
            - playcount # need playcount to filter out watched episode
            - episode
      register: episodes

    - name: Get a list of only unwatched episodes
      set:
        - unwatched: '= R.episodes.response | $.episodes[?(@.playcount==0)].episodeid'
        - unwatched_label: '= R.episodes.response | $.episodes[?(@.playcount==0)].label'

    - name: No unwatched episode
      when: '=len(V.unwatched) == 0'
      chromecast:
        tts: '=format(R.strings.content.play_tvshow.notfound, V.title)'
      result: =false

    - name: Log the tvshow that will be played
      log:
        msg: >
          =format(R.strings.content.play_tvshow.feedback, V.title, V.unwatched_label[0])

    - name: Play episdoe
      jsonrpc:
        procedure: Player.Open
        params:
          item: # Play the first unwatched episode
            episodeid:  = V.unwatched[0]
    result: '=!R.tvshow.result' # Stop here if the phrase was matched


  - name: Play movie
    pipe:
    - name: Match a phrase asking to play a movie
      match:
        regexp: =R.strings.content.play_movie.regexp
      register: movie

    - name: Get the list of all available movies
      jsonrpc:
        procedure: VideoLibrary.GetMovies
      register: movies

    - name: Get the movie ID using a fuzzy search on all titles
      set:
          # get titles from Kodi response with a jsonpath expression
        - titles:  '= R.movies.response | $.movies[*].label'
          # get best matching title
        - title:   '= fuzzy(R.movie.named.title, V.titles)'
          # get id corresponding to matched title
        - movieid: >
            = jsonpath(format(`$.movies[?(@.label=="%s")].movieid`, V.title),
                       R.movies.response)
    - log:      # Log the movie that will be played
        msg: '=format(R.strings.content.play_movie.feedback, V.title)'


    - name: Play the movie
      jsonrpc:
        procedure: Player.Open
        params:
          item:
            movieid: "=V.movieid[0]"
    result: "=!R.movie.result" # Stop here if the phrase was matched
